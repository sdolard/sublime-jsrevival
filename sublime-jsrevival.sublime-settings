{
	// A list of comma separated strings, the names of predefined global variables,
	// or an object whose keys are global variable names, 
	// and whose values are booleans that determine if each variable is assignable (also see global). 
	// predef is used with the option object, but not with the /*jslint*/ directive. 
	// You can also use the var statement to declare global variables in a script file.
	"predef": "",

	// A list of comma separated strings with this format: "token: value"
	// JSLint default options:
	//   anon: true # if the space may be omitted in anonymous function declarations
	//   bitwise: true # if bitwise operators should be allowed
	//   browser: true # if the standard browser globals should be predefined
	//   cap: true # if upper case HTML should be allowed
	//   continue: true # if the continuation statement should be tolerated
	//   css: true # if CSS workarounds should be tolerated
	//   debug: true # if debugger statements should be allowed
	//   devel: true # if logging should be allowed (console, alert, etc.)
	//   eqeq: true # if == should be allowed
	//   es5: true # if ES5 syntax should be allowed
	//   evil: true # if eval should be allowed
	//   forin: true # if for in statements need not filter
	//   fragment: true # if HTML fragments should be allowed
	//   indent: 10 # the indentation factor
	//   maxerr: 1000 # the maximum number of errors to allow
	//   maxlen: 256 # the maximum length of a source line
	//   newcap: true # if constructor names capitalization is ignored
	//   node: true # if Node.js globals should be predefined
	//   nomen: true # if names may have dangling _
	//   on: true # if HTML event handlers should be allowed
	//   passfail: true # if the scan should stop on first error
	//   plusplus: true # if increment/decrement should be allowed
	//   properties: true # if all property names must be declared with /*properties*/
	//   regexp: true # if the . should be allowed in regexp literals
	//   rhino: true # if the Rhino environment globals should be predefined
	//   undef: true # if variables can be declared out of order
	//   unparam: true # if unused parameters should be tolerated
	//   sloppy: true # if the 'use strict'; pragma is optional
	//   stupid: true # if really stupid practices are tolerated
	//   sub: true # if all forms of subscript notation are tolerated
	//   todo: true # if TODO comments are tolerated
	//   vars: true # if multiple var statements per function should be allowed
	//   white: true # if sloppy whitespace is tolerated
	//   windows: true # if MS Windows-specific globals should be predefined
	"options": "es5: false, properties: false, maxlen: 0, debug: false, newcap: false, unparam: false, sub: false, vars: false, passfail: false, undef: false, bitwise: false, eqeq: false"
}